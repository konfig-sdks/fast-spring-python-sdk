# coding: utf-8

"""
    FastSpring API

    The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from fast_spring_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from fast_spring_python_sdk.api_response import AsyncGeneratorResponse
from fast_spring_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fast_spring_python_sdk import schemas  # noqa: F401

from fast_spring_python_sdk.model.generate_subscription_report_request import GenerateSubscriptionReportRequest as GenerateSubscriptionReportRequestSchema
from fast_spring_python_sdk.model.generate_subscription_report_request_group_by import GenerateSubscriptionReportRequestGroupBy as GenerateSubscriptionReportRequestGroupBySchema
from fast_spring_python_sdk.model.filter_subscription_report_request import FilterSubscriptionReportRequest as FilterSubscriptionReportRequestSchema
from fast_spring_python_sdk.model.generate_subscription_report_request_notification_emails import GenerateSubscriptionReportRequestNotificationEmails as GenerateSubscriptionReportRequestNotificationEmailsSchema
from fast_spring_python_sdk.model.data_generate_subscription_report_response import DataGenerateSubscriptionReportResponse as DataGenerateSubscriptionReportResponseSchema
from fast_spring_python_sdk.model.generate_subscription_report_request_report_columns import GenerateSubscriptionReportRequestReportColumns as GenerateSubscriptionReportRequestReportColumnsSchema

from fast_spring_python_sdk.type.data_generate_subscription_report_response import DataGenerateSubscriptionReportResponse
from fast_spring_python_sdk.type.generate_subscription_report_request_report_columns import GenerateSubscriptionReportRequestReportColumns
from fast_spring_python_sdk.type.generate_subscription_report_request_notification_emails import GenerateSubscriptionReportRequestNotificationEmails
from fast_spring_python_sdk.type.generate_subscription_report_request_group_by import GenerateSubscriptionReportRequestGroupBy
from fast_spring_python_sdk.type.generate_subscription_report_request import GenerateSubscriptionReportRequest
from fast_spring_python_sdk.type.filter_subscription_report_request import FilterSubscriptionReportRequest

from ...api_client import Dictionary
from fast_spring_python_sdk.pydantic.filter_subscription_report_request import FilterSubscriptionReportRequest as FilterSubscriptionReportRequestPydantic
from fast_spring_python_sdk.pydantic.generate_subscription_report_request_report_columns import GenerateSubscriptionReportRequestReportColumns as GenerateSubscriptionReportRequestReportColumnsPydantic
from fast_spring_python_sdk.pydantic.generate_subscription_report_request import GenerateSubscriptionReportRequest as GenerateSubscriptionReportRequestPydantic
from fast_spring_python_sdk.pydantic.data_generate_subscription_report_response import DataGenerateSubscriptionReportResponse as DataGenerateSubscriptionReportResponsePydantic
from fast_spring_python_sdk.pydantic.generate_subscription_report_request_group_by import GenerateSubscriptionReportRequestGroupBy as GenerateSubscriptionReportRequestGroupByPydantic
from fast_spring_python_sdk.pydantic.generate_subscription_report_request_notification_emails import GenerateSubscriptionReportRequestNotificationEmails as GenerateSubscriptionReportRequestNotificationEmailsPydantic

# body param
SchemaForRequestBodyApplicationJson = GenerateSubscriptionReportRequestSchema


request_body_generate_subscription_report_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = DataGenerateSubscriptionReportResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: DataGenerateSubscriptionReportResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: DataGenerateSubscriptionReportResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: typing.Union[bool, date, datetime, dict, float, int, list, str, None]


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: typing.Union[bool, date, datetime, dict, float, int, list, str, None]


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _generate_subscription_report_mapped_args(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if filter is not None:
            _body["filter"] = filter
        if report_columns is not None:
            _body["reportColumns"] = report_columns
        if group_by is not None:
            _body["groupBy"] = group_by
        if page_count is not None:
            _body["pageCount"] = page_count
        if page_number is not None:
            _body["pageNumber"] = page_number
        if _async is not None:
            _body["async"] = _async
        if notification_emails is not None:
            _body["notificationEmails"] = notification_emails
        args.body = _body
        return args

    async def _agenerate_subscription_report_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Generates a subscription report
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data/v1/subscription',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_generate_subscription_report_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _generate_subscription_report_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Generates a subscription report
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data/v1/subscription',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_generate_subscription_report_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GenerateSubscriptionReportRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def agenerate_subscription_report(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_subscription_report_mapped_args(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
        )
        return await self._agenerate_subscription_report_oapg(
            body=args.body,
            **kwargs,
        )
    
    def generate_subscription_report(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_subscription_report_mapped_args(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
        )
        return self._generate_subscription_report_oapg(
            body=args.body,
        )

class GenerateSubscriptionReport(BaseApi):

    async def agenerate_subscription_report(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
        validate: bool = False,
        **kwargs,
    ) -> DataGenerateSubscriptionReportResponsePydantic:
        raw_response = await self.raw.agenerate_subscription_report(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
            **kwargs,
        )
        if validate:
            return RootModel[DataGenerateSubscriptionReportResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(DataGenerateSubscriptionReportResponsePydantic, raw_response.body)
    
    
    def generate_subscription_report(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
        validate: bool = False,
    ) -> DataGenerateSubscriptionReportResponsePydantic:
        raw_response = self.raw.generate_subscription_report(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
        )
        if validate:
            return RootModel[DataGenerateSubscriptionReportResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(DataGenerateSubscriptionReportResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_subscription_report_mapped_args(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
        )
        return await self._agenerate_subscription_report_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        filter: typing.Optional[FilterSubscriptionReportRequest] = None,
        report_columns: typing.Optional[GenerateSubscriptionReportRequestReportColumns] = None,
        group_by: typing.Optional[GenerateSubscriptionReportRequestGroupBy] = None,
        page_count: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        _async: typing.Optional[bool] = None,
        notification_emails: typing.Optional[GenerateSubscriptionReportRequestNotificationEmails] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_subscription_report_mapped_args(
            filter=filter,
            report_columns=report_columns,
            group_by=group_by,
            page_count=page_count,
            page_number=page_number,
            _async=_async,
            notification_emails=notification_emails,
        )
        return self._generate_subscription_report_oapg(
            body=args.body,
        )

